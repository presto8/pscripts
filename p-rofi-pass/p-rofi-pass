#!/usr/bin/env bash

# Inspired by: https://github.com/carnager/rofi-pass
#
# Save most recently selected entry and put it first in the list.
# Shallow display of entries (top dirs, then subdirs)

set -Eeu -o pipefail

main() {
    setup
    check_deps
    process_args "$@"
    cd ~/.password-store
    do_rofi
    do_action
}

do_action() {
    case $MODE in
        pass)
            pass show "$ROFI_SELECTION" | head -1 | do_xclip
            ;;
        login)
            get_field login | do_xclip
            ;;
        otp)
            pass otp "$ROFI_SELECTION" | do_xclip
    esac
}

process_args() {
    case $* in
        *login*)
            MODE=login ;;
        *otp*)
            MODE=otp ;;
        *)
            MODE=pass ;;
    esac
}

do_xclip() {
    xclip -rmlastnl
}

get_field() {
    if set -- $(pass show "$ROFI_SELECTION" | grep "^$1: "); then
        shift
        echo "$*"
    fi
}

setup() {
    declare -g MODE=${MODE:-pass}
    local config=${XDG_CONFIG_HOME:-$HOME/.config}
    local configrofi="$config/p-rofi-pass"
    mkdir -p "$configrofi"
    declare -g LAST_SELECTION="$configrofi/last-selection"
}

check_deps() {
    for dep in rofi pass; do
        if ! which "$dep" &>/dev/null; then
            die "need $dep but not in PATH"
        fi
    done
}

do_rofi() {
    # Runs in a subshell when used in pipeline
    cmd=(
        rofi
        -dmenu
        -p pass
    )
    local -i rofi_ret=0
    ROFI_SELECTION=$(list_passwords | "${cmd[@]}") || rofi_ret=$?
    echo "$ROFI_SELECTION" > "$LAST_SELECTION"
}

evaluate_rofi_rc() {
    # exit code >= 10 means keyboard shortcut was used, 10=Alt+1, 11=Alt+2, and so on.
    case $1 in
        10) MODE="pass" ;;
        11) MODE="login" ;;
        12) MODE="otp" ;;
    esac
}

do_type() {
    :
    # disabled -- too dangerous -- unless we can tell if we are focused in an input box
    # xdotool type --clearmodifiers --file -
}


listgpg() {
    # display last selection if available
    if [[ -e "$LAST_SELECTION" ]]; then
        cat "$LAST_SELECTION"
    fi

    # display top-level files
    find . -maxdepth 1 -mindepth 1 -name '*.gpg' -printf '%P\n' | sort -n

    # display subdirs
    find . -mindepth 2 -name '*.gpg' -printf '%P\n' | sort -n
}

# get all password files and output as newline-delimited text
list_passwords() {
    listgpg | sed 's/\.gpg$//'
}

die() { echo "!! $*"; exit 1; }

main "$@"
