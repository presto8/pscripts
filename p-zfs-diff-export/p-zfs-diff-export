#!/usr/bin/env python
"""
export-zfs-diff by Preston Hunt <me@prestonhunt.com>

Runs 'zfs diff -Hh' between an older snapshot and a newer one. Ignores renames
and deleted files. Makes a copy of any modified or added files into the
specified export directory. Idea is to use this to copy the unique content in a
newer snapshot and then delete the newer snapshot
"""

import argparse
import os
import re
import subprocess
import sys
from datetime import datetime
from contextlib import contextmanager
from dataclasses import dataclass
from typing import Optional, TypeVar


def parse_args():
    parser = argparse.ArgumentParser(description=__doc__, formatter_class=argparse.RawDescriptionHelpFormatter)

    parser.add_argument('--older-snapshot', required=True)
    parser.add_argument('--newer-snapshot', required=True)
    parser.add_argument('--export-to', required=True)
    return parser.parse_args()


def main():
    if os.path.exists(ARGS.export_to):
        raise Fail(f"destination must not exist: {ARGS.export_to}")

    summary = format_summary()
    print(summary)

    dataset_name, newer_snapshot_name = ARGS.newer_snapshot.split('@')
    dataset_mountpoint = get_zfs_mountpoint(dataset_name)
    newer_mountpoint = os.path.join(dataset_mountpoint, ".zfs", "snapshot", newer_snapshot_name)

    os.makedirs(ARGS.export_to)
    logfile = os.path.join(ARGS.export_to, "zfs.diff.log")
    with open(logfile, "wt") as f:
        print(summary, file=f)

    print("\nGetting diffs between snapshots (this may take a while)...")
    diffs = get_zfs_diffs(logfile)

    for line in diffs:
        op, path, *parts = line.split('\t')
        if op == '-' or op == 'R':
            continue
        elif op == 'M' or op == '+':
            copy_from_snapshot(dataset_mountpoint, newer_mountpoint, path)
        else:
            raise Fail(f"unhandled: {parts}")

    print("All changed or added files were exported")
    print(f"Snapshot {ARGS.newer_snapshot} can be deleted now:")
    print(f": sudo zfs destroy {ARGS.newer_snapshot}")


def format_summary():
    return f"""
Exporting added or changed files:
  between snapshot: {ARGS.older_snapshot}
  and snapshot:     {ARGS.newer_snapshot}
  export to:        {ARGS.export_to}"""


def copy_from_snapshot(dataset_mountpoint, newer_mountpoint, path):
    if not path.startswith(dataset_mountpoint):
        raise
    path_rel_to_dataset = path[len(dataset_mountpoint):]
    print(dataset_mountpoint, path, path_rel_to_dataset)
    full_path = f"{newer_mountpoint}/./{path_rel_to_dataset}"

    if os.path.isdir(full_path):
        # Directories that are marked as changed don't need to be copied; any
        # files that were added or changed underneath the directory will get
        # their own line in the zfs diff output
        return

    cmd = ["sudo", "rsync", "-a", "--relative", full_path, ARGS.export_to]
    print(cmd)
    result = subprocess.run(cmd, capture_output=True, text=True)
    if result.returncode != 0:
        print("!!", result)


def get_zfs_diffs(logpath):
    cmd = ["sudo", "zfs", "diff", "-Hh", ARGS.older_snapshot, ARGS.newer_snapshot]
    result = subprocess.run(cmd, capture_output=True, text=True)
    with open(logpath, "at") as f:
        print(result.stdout, file=f)
    return [line.rstrip() for line in result.stdout.split('\n') if line]


def get_zfs_mountpoint(name):
    result = subprocess.run(["zfs", "get", "mountpoint", "-H", "-o", "value", name], capture_output=True, text=True)
    if result.returncode != 0:
        raise Fail(f"unable to get mountpoint: {name}")
    return result.stdout.strip()


class Fail(Exception):
    pass


if __name__ == '__main__':
    try:
        ARGS = parse_args()
        main()
    except Fail as f:
        print(*f.args, file=sys.stderr)
        sys.exit(1)
    except KeyboardInterrupt:
        print("Ctrl+C")
